@page "/"
@using FarmManagement.Client.Pages.Home_Dialog

@inject IDialogService DialogService
@inject HttpClient httpClient

<PageTitle>Home</PageTitle>

<MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
    Add Field
</MudButton>

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<FieldsDataModel,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Fields Details</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="text-align:center">Field Name</MudTh>
        <MudTh Style="text-align:center; width:250px;">Field Area</MudTh>
        <MudTh Style="text-align:center">Crop Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Sign">@context.FieldName</MudTd>
            <MudTd Style="text-align:right" DataLabel="Name">@context.FieldArea</MudTd>
            <MudTd DataLabel="Position">@context.CropName</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private HashSet<FieldsDataModel> selectedItems = new HashSet<FieldsDataModel>();

    private IEnumerable<FieldsDataModel> Elements = new List<FieldsDataModel>();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetStringAsync("get-all-fields");
        var res = JsonConvert.DeserializeObject<ResponseModel>(response);
        var fghfg = JsonConvert.DeserializeObject<List<FieldsDataModel>>(res.data.ToString());
        Elements = fghfg;
    }

    private bool FilterFunc1(FieldsDataModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(FieldsDataModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FieldName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CropName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogReference = await DialogService.ShowAsync<AddEditFarm>("ADD FIELD", options);
        StateHasChanged();
        var dialogResult = await dialogReference.Result;
        if (dialogResult != null && dialogResult.Canceled)
        {
            StateHasChanged();
        }
        else
        {
            var response = await httpClient.GetStringAsync("get-all-fields");
            var res = JsonConvert.DeserializeObject<ResponseModel>(response);
            Elements = JsonConvert.DeserializeObject<List<FieldsDataModel>>(res.data.ToString());
            StateHasChanged();
        }
    }




}