@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject FarmDbContext _dbContext
@inject ISnackbar Snackbar

<MudDialog OnKeyDown="OnKeyDownAsync" Style="width: 35%">

    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Field Name" @bind-Value="model.FieldName" For="@(() => model.FieldName)" />
                            <MudNumericField Label="Field Area" Class="mt-3" @bind-Value="model.FieldArea" For="@(() => model.FieldArea)" />
                            <MudTextField Label="Crop Name" Class="mt-3" @bind-Value="model.CropName" For="@(() => model.CropName)" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Field</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>

    </DialogContent>
</MudDialog>

@code {
    [Inject]
    private IDialogService DialogService { get; set; } // for MessageBox

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string _returnValue;

    private void Submit() => MudDialog.Close(DialogResult.Ok(_returnValue));

    private void Cancel() => MudDialog.Cancel();

    private async Task OnKeyDownAsync(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
            case "NumpadEnter":
                if (string.IsNullOrEmpty(_returnValue))
                {
                    await DialogService.ShowMessageBox(
                        "Sorry",
                        @"You must either select a coffee and close with Enter or cancel with Escape!",
                        yesText: "Got it",
                        options: new DialogOptions() { CloseOnEscapeKey = true });
                    return;
                }
                Submit();
                break;
        }
    }

    RegisterField model = new RegisterField();
    bool success;

    public class RegisterField
    {
        [Required]
        [StringLength(1024, ErrorMessage = "Name must be at least 3 characters long.", MinimumLength = 3)]
        public string FieldName { get; set; }

        [Required]
        [Range(0.000000001, double.MaxValue, ErrorMessage = "The value must be a positive number")]
        public double FieldArea { get; set; }

        [Required]
        [StringLength(1024, ErrorMessage = "Crop Name must be at least 3 characters long.", MinimumLength = 3)]
        public string CropName { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        var items = _dbContext.Fields.ToList();
        var item = items.FirstOrDefault(x => x.FieldName == model.FieldName);
        if (item == null)
        {
            _dbContext.Fields.Add(new FieldsDataModel
                {
                    Id = Guid.NewGuid(),
                    CropName = model.CropName,
                    FieldArea = model.FieldArea,
                    FieldName = model.FieldName
                });
            _dbContext.SaveChanges();
            MudDialog.Close();
            Snackbar.Add("Successfully added!", Severity.Success);
        }
        else
        {
            Snackbar.Add("The field name is already exist!", Severity.Error);
        }
        StateHasChanged();

    }
}